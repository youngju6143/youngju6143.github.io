---
layout: post
title:  "[데이터 분석 chap 10. 데이터 탐색과 시각화]"
date:   2024-07-22 21:54:38 +0900
categories: ML Session
---
## 10.1 탐색적 데이터 분석
<font color='blue'>**Garbage In, Garbage Out(GIGO)**</font>? 가치가 없는 잘못된 데이터를 사용하면 무가치한 결과가 도출됨
-> 다양한 각도에서 데이터를 탐색하고 시각화하여 가치 있는 데이터로 정제해 나가야 함

<font color='blue'>**EDA(Exploratory Data Analysis)**</font> ? 가공하지 않은 원천의 데이터를 있는 그대로 탐색하고 분석하는 기법
- 기술통계와 데이터 시각화를 통해 데이터의 특성 파악
- EDA를 할 때는 극단적인 해석은 피해야 하며 지나친 추록이나 자의적 해석도 지양해야 함
- **EDA의 목적**
    - 데이터의 형태와 척도가 분석에 알맞게 되어있는지 확인(sanity checking)
    - 데이터의 평균, 분산, 분포, 패턴 등의 확인을 통해 데이터 특성 파악
    - 데이터의 결측값이나 이상치 파악 및 보완
    - 변수 간의 관계성 파악
    - 분석 목적과 방향성 점검 및 보정

### 10.1.1 엑셀을 활용한 EDA
<img width="300" alt="스크린샷 2024-07-22 오후 11 15 27" src="https://github.com/user-attachments/assets/e685bdab-31ed-4370-96ac-aab7fcceddfc">
<img width="300" alt="스크린샷 2024-07-22 오후 11 16 00" src="https://github.com/user-attachments/assets/b4055cdb-68e6-4fb5-8381-26797e8164d1">

EDA를 하는 가장 간단하면서 효과적인 방법 : 엑셀을 사용하여 시각화 <br/>
- 각 데이터 샘플을 1000개씩 뽑아서 엑셀에 붙여 놓고 변수와 설명 리스트와 함께 눈으로 살펴봄
위의 데이터처럼, 한눈에 데이터를 파악할 수 있음


### 10.1.2 탐색적 데이터 분석 실습
```
df.head() # 데이터의 샘플 확인
df.info() # 데이터에 대한 전반적인 정보 확인
df.describe() # 데이터의 통계 정보, 평균, 표준편차, 최대 최솟값 등을 한 번에 확인 가능
df.skew() # 왜도 확인
df.kurtosis() # 첨도 확인
```

```
# 특정 변수 분호 시각화
sns.distplot(df['lead_time'])

# 호텔 구분에 따른 lead_time 분포 차이 시각화
sns.violinplot(x='hotel', y='lead_time', data=df, inner=None, color=".8") # violinplot : 분포를 효과적으로 표현
sns.stripplot(x='hotel', y='lead_time', data=df, size=1)
# stripplot : 각 관측치의 위치를 직관적으로 표현
```

## 10.2 공분산과 상관성 분석
데이터 탐색 과정에서 평균, 분산 등의 각 변수들의 특성을 파악한 다음, 항상 하는 과정 중 하나는 <font color='red'>**변수 간의 관계를 파악하는 것**</font><br/>

타깃 변수 Y와 입력 변수 X와의 관계는 물론 **입력 변수 X들 간의 관계도 살펴봐야 함** <br/>
-> 독립 변수의 변화에 따른 종속 변수의 변화량을 크게 하여 통계적 정확도를 감소시키는 다중공선성 방지 & 데이터에 대한 이해도 증가



### 10.2.1 공분산
<font color='blue'>**공분산(Covariance)**</font> ? 서로 공유하는 분산의 관계를 나타냄<br/>
한계 : 각 변수 간의 다른 척도기준이 그대로 반영되어 공분산 값이 지니는 크기가 상관성의 정도를 나타내지 못함

↓ 공식<br/>
<img width="300" src="https://github.com/user-attachments/assets/b6fe5140-39e3-4966-aff6-44f052d3cd69">


### 10.2.2 상관계수
공분산을 변수 각각의 표준편차 값으로 나누는 정규화 실행 <- 공분산의 한계 해결<br/>
<font color='blue'>**피어슨 상관계수**</font> ? 공분산을 함께 변하는 정도로 나눈 값
<img width="200" src="https://github.com/user-attachments/assets/a260e122-7d34-4cfc-ac17-0a54fcec4f7b"> <br/>

**상관계수를 해석하는 기준**
- 절댓값이 0.7 이상 -> 상관관계 매우 높음
- 절댓값이 0.4 이상 -> 어느 정도 상관관계가 있음

<img width="200" src="https://github.com/user-attachments/assets/3b65f963-b415-41ad-8a24-fabe384fb646">
<img width="400" src="https://github.com/user-attachments/assets/6672391d-87ea-4f5c-a206-e8558ff88938">
-> 기울기가 위로 향하면 양의 상관관계 / 아래로 향하면 음의 상관관계

<font color='magenta'>※ 산점도의 기울기와 상관계수는 관련이 없음, 분산의 관계성이 같다면, 기울기에 상관없이 상관계수는 같음 ※</font>

<font color='blue'>**결정계수**</font> ? 상관계수를 제곱한 값, 총 변동 중에서 회귀선에 의해 설명되는 변동이 차지하는 비율
- $R^2$ 로 표기됨
- 회귀분석의 정확도를 가늠하는 중요한 기준


### 10.2.3 공분산과 상관성 분석 실습
```
df.cov() # 공분산 확인
df.corr(method='pearson') # 피어슨 상관계수 확인
```

```
sns.heatmap(df.corr(), cmap='viridis') # 히트맵 시각화
```
: 노란색에 가까울수록 양의 상관관계, 보라색에 가까울수록 음의 상관관계를 띰

```
# clustermap 히트맵 시각화
sns.clustermap(df.corr(), annot=True, cmap='RdYlBu_r', vmin=-1, vmax=1)
```
: 히트맵과 함께 상관계수도 확인할 수 있음

## 10.3 시간 시각화
시점 요소가 있는 데이터는 시계열(Time series) 형태로 표현 가능
시계열 == 시간 흐름에 따른 데이터
- 전체적인 흐름을 한눈에 확인 할 수 있음
- 데이터의 트렌드나 노이즈도 쉽게 찾아낼 수 있음

**시간 시각화 선그래프 종류**
- 선그래프 형태인 **연속형**
    - 시간 간격의 밀도가 높을 때 사용됨
    - 효과적으로 데이터 변화 파악 가능
    - 데이터의 양이 너무 많거나 변동 심하면 트렌드나 패턴 확인 어려움 -> 추세선 삽입
        - 추세선 : 이동평균 방법을 사용하여 그림 -> 데이터의 연속적 그룹의 평균 구함
- 막대그래프 형태인 **분절형**
    - 시간의 밀도가 낮은 경우에 사용됨
    - 값의 상대적 차이를 나타내는 것에 유리함
    - 막대에 색상 추가 -> 특정 시점에 대한 정보 추가 가능
    - 누적 막대그래프, 점 그래프 등으로 표현됨
        - 누적 막대그래프 : 한 시점에 2개 이상의 세부 항목이 존재할 때 사용

<img width="588" src="https://github.com/user-attachments/assets/28d94af8-d669-494b-bc37-1bf75e56abff">


### 10.3.1 시간 시각화 실습
```
# data 칼럼 날짜 형식 변환
df['Date2'] = pd.to_datetime(df['Order Date'], format='%d/%m/%Y')

# 날짜 오름차순 정렬
df = df.sort_values(by='Date2')
# 연도 칼럼 생성
df['Year'] = df['Date2'].dt.year

# 선그래프용 데이터셋 생성
# 2018년 데이터만 필터링
df_line = df[df.Year == 2018]

# 2018년 일별 매출액 가공
df_line = df_line.groupby('Date2')['Sales'].sum().reset_index()
df_line.head()
```
<img width="200" src="https://github.com/user-attachments/assets/62dfbd59-375d-4294-9c6e-c0b45238fde2">

```
# 30일 이동평균 생성
df_line["Month"] = df_line['Sales'].rolling(window=30).mean()
# rolling : Month 칼럼 생성
```

```
# 연도별 판매량 데이터 가공
df_bar_1 = df.groupby('Year')['Sales'].sum().reset_index()
# groupby() : 그룹화하여 연도별 매출액 데이터로 가공
```

```
# 연도별 고객 세그먼트별 매출액 누적 막대그래프 시각화
df_bar_2_pv.plot.bar(x='Year', stacked=True, figsize=(10,7))
# stacked=True : 누적 그래프
```

## 10.4 비교 시각화
그룹별 요소가 많아질 때 그래프보다 더 효율적인 표현 기법 사용해야 함 -> 비교 가능한 시각화 필요 <br/>
<font color='blue'>**히트맵 차트(Heatmap chart)**</font> ? 그룹과 비교 요소가 많을 때 효과적으로 시각화를 할 수 있는 방법
- 히트맵의 각각의 셀 : 색상 or 채도를 통해 데이터 값의 높낮이 표현
- 각 그룹을 기준으로 요소 크기 비교 / 각 요소를 기준으로 그룹 크기 비교

- **표현 방법** 
    - 하나의 변수(그룹) * N개의 각 변수에 해당하는 값들(수치형)
    - 하나의 변수(그룹) * 하나의 변수(그룹/수준) * 하나의 변수(수준)

    <img width="299" src="https://github.com/user-attachments/assets/78e2afad-1c8b-47ef-91ee-95064f500e91">

<font color='blue'>**방사형 차트(Radar chart)**</font>
- **표현 방법** 
    - 하나의 차트에 하나의 그룹을 시각화
    - 하나의 차트에 모든 그룹을 한 번에 시각화

    <img width="400" src="https://github.com/user-attachments/assets/60e0017a-72b9-461e-b44c-ed588ab610d3">
    
<font color='blue'>**평행 좌표 그래프(Parallel coordinates)**</font>
- 평행 좌표 그래프를 보다 효과적으로 표현하는 방법 :  변수별 값 정규화<br/>
    -> 각 그룹의 요소별 차이 수준을 효과적으로 파악할 수 있음<br/>
    -> 집단적 경향성 표현에 용이함<br/>
    -> 어떤 집단들이 비슷한 경향을 나타내는지 쉽게 파악할 수 있음<br/>

    <img width="400" alt="스크린샷 2024-07-23 오전 2 28 46" src="https://github.com/user-attachments/assets/d2becaf8-50bf-4c15-b4dd-77ede2ddde95">



### 10.4.1 비교 시각화 실습

## 10.5 분포 시각화
연속형과 같은 양적 척도인지, 명목형과 같은 질적 척도인지에 따라 구분해서 그림

- **양적 척도**
    - <font color='blue'>막대그래프나 선그래프 or 히스토그램</font>으로 나타냄
        - **히스토그램** ? 겹치지 않는 변수의 구간을 동일하게 나눠서 구간별 도수를 막대그래프로 표현
            - 각 구간 : bin, 구간의 높이 : 밀도

        <img width="343" alt="스크린샷 2024-07-23 오전 2 29 25" src="https://github.com/user-attachments/assets/092e1ba5-b261-42bd-8520-31d7fe657a62">


- **질적 척도**
    - <font color='blue'>파이차트 or 도넛차트 사용</font>
        - 전체를 100%로 하여 구성 요소들의 분포 정도를 면적(각도)으로 표현함

        <img width="400" alt="스크린샷 2024-07-23 오전 2 29 18" src="https://github.com/user-attachments/assets/0a9c188a-f925-4145-ba5a-e49b072cf33e">
- **구성 요소가 복잡한 질적 척도**
    - <font color='blue'>트리맵 차트</font>
        - 하나의 큰 사각형을 구성 요소의 비율에 따라 작은 사각형으로 쪼개어 분포 표현
        - 장점 : 사각형 안에 더 작은 사각형을 포함시켜서 위계구조를 표현할 수 있음 <br/>
            -> 한정된 공간 안에서 많은 구성 요소들의 분포를 체계적으로 표현할 수 있음
        - 단점 : 구성 요소들 간의 규모 차이가 크면 표현이 어려울 수 있음

        <img width="400" src="https://github.com/user-attachments/assets/ceec4a66-8119-4747-bc16-1b610de0ca78">
    - <font color='blue'>와플 차트</font>
        - 와플처럼 일정한 네모난 조각들로 분포를 표현
        - 위계구조를 표현하지는 못 함

        <img width="300" src="https://github.com/user-attachments/assets/2e6d9cc7-52af-4132-805e-be34e31df6bb">

    

### 10.5.1 분포 시각화 실습

## 10.6 관계 시각화
- <font color='blue'>**산점도**</font>
    - 단순해서 쉽게 이해하고 표현할 수 있음
    - 점들의 분포와 추세를 통해 두 변수 간의 관계 파악 가능
    - 극단치를 제거하고서 그리는 것이 좋음
    - tip) 각 점에 **투명도**를 주어 점들의 밀도를 표현할 수 있음
    - 단점 : 두 개의 변수 간 관계만 표현할 수 있음

    <img width="300" src="https://github.com/user-attachments/assets/7c04ccda-c02d-486d-bfec-0d51f7bb6f28">


- <font color='blue'>**버블 차트**</font>
    - 세 가지 요소의 상관관계 표현 가능 <- 산점도의 단점 개선 <br/>
       : **버블의 크기**를 통해 한 가지 요소를 추가적으로 볼 수 있음
    - 색상이나 애니메이션을 추가하면서 다양한 표현 가능
    - 관측지(observations)가 너무 많게 되면 정보 전달의 효율 떨어짐
    - <font color='magenta'>※ 원의 지름이 아닌 **면적**을 통해 크기를 판단해야함※</font>

    <img width="300" src="https://github.com/user-attachments/assets/d2976959-e8d5-46ee-a3e4-fa17b1fd36d8">


### 10.6.1 관계 시각화 실습

## 10.7 공간 시각화
- 데이터가 지리적 위치와 관련되어있으면 실제 지도 위에 데이터를 표현하는 것이 효과적 -> 공간 시각화
- 데이터를 보다 더 훨씬 명확하고 직관적으로 볼 수 있음
- 지도를 확대하거나 위치를 옮기는 등 인터랙티브한 활용 가능 <br/>
-> 거시적에서 미시적으로 진행되는 분석 방향과 같이 스토리라인을 잡고 시각화를 적용하는 것이 좋음

- <font color='blue'>**도트맵**</font>
    - 지리적 위치에 동일한 크기의 작은 점을 찍어, 해당 지역의 데이터 분포나 패턴을 표현
    - 시각적으로 데이터의 개요를 파악하는 데 유리함
    - 정확한 값을 전달하는 데에는 부적합
- <font color='blue'>**코로플레스맵**</font>
    - 단계 구분도, 데이터 값의 크기에 따라 색상의 음영을 달리하여 해당 지역에 대한 값을 시각화하는 기법
    - 여러 색상 혼합 가능 & 투명도, 명도, 채도 등 다양한 표현 가능
    - 정확한 수치를 인지 및 비교 어려움
    - 작은 지역들에 비해 큰 지역이 꽤 강조됨
- <font color='blue'>**버블맵**</font>
    - 버블차트를 지도에 그대로 옮겨둔 것
    - 비율 비교 효과적
    - 버블의 크기가 크면 다른 지역의 버블와 겹칠 수 있으므로 적절한 조절 필요
- <font color='blue'>**커넥션맵 or 링크맵**</font>
    - 지도에 찍힌 점들을 곡선 또는 직선으로 연결하여 지리적 관계 & 경로 표현
    - 연결선의 분포와 집중도를 통해 지리적 관계의 패턴을 파악하기 위해 사용됨

<img width="500" alt="스크린샷 2024-07-23 오전 2 32 27" src="https://github.com/user-attachments/assets/a026c088-4e3f-4552-92c7-8395c389d847">


### 10.7.1 공간 시각화 실습

## 10.8 박스 플롯
- 네모 상자 모양에 최댓값과 최솟값을 나타내는 선이 결합된 모양의 데이터 시각화 방법
- **하나의 그림으로 양적 척도 데이터의 분포 및 편향성, 평균과 중앙값 등 다양한 수치를 보기 쉽게 정리해줌**
- 두 변수의 값을 비교할 때 효과적
- 데이터의 대체적인 분포 형태를 쉽게 확인하기 위해 & 카테고리별 분포를 비교하기 위해 사용

    <img width="300" alt="스크린샷 2024-07-23 오전 2 33 01" src="https://github.com/user-attachments/assets/18b47010-1cd5-4f3d-9921-b54d10997909">

- **데이터의 속성을 유추할 수 있는 5개의 수치**
    - **최솟값** : 제1사분위에서 1.5IQR을 뺀 위치
    - **제1사분위** : 25%의 위치
    - **제2사분위** : 50%의 위치(==중앙값)
    - **제3사분위** : 75%의 위치
    - **최댓값** : 제3사분위에서 1.5IQR을 더한 위치
    - **(평균값)**

- 각 최솟값과 최댓값의 범위를 넘어가는 값은 이상치로서 작은 원으로 표시함<br/>
<img width="300" alt="스크린샷 2024-07-23 오전 2 33 10" src="https://github.com/user-attachments/assets/dcdf301c-dca4-41bb-afcf-7eb130aa06ed">

    ↓ 분위수 구하는 수식 <br/>
    <img width="185" src="https://github.com/user-attachments/assets/f4ffdf82-efc9-4d98-93f6-4cc6f59f9802">
### 10.3.1 박스 플롯 실습
